// <auto-generated />
using dal;
using dal.models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace dal.Migrations
{
    [DbContext(typeof(CryptoInvestContext))]
    [Migration("20180304212550_PlatformsRates")]
    partial class PlatformsRates
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("dal.models.Account", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Caption");

                    b.Property<int>("CurrencyID");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("PlatformID");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("PlatformID");

                    b.HasIndex("UserID", "Name")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("dal.models.Currency", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Acronym")
                        .IsRequired();

                    b.Property<string>("CurrencySymbol");

                    b.Property<bool>("IsFiat");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("RoundToDecimals");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("dal.models.Platform", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("dal.models.PlatformCurrencyPair", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PlatformID");

                    b.Property<int>("SourceCurrencyID");

                    b.Property<int>("TargetCurrencyID");

                    b.HasKey("ID");

                    b.HasIndex("SourceCurrencyID");

                    b.HasIndex("TargetCurrencyID");

                    b.HasIndex("PlatformID", "SourceCurrencyID", "TargetCurrencyID")
                        .IsUnique();

                    b.ToTable("PlatformCurrencyPairs");
                });

            modelBuilder.Entity("dal.models.PlatformRate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("Close");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<decimal?>("High");

                    b.Property<decimal?>("Low");

                    b.Property<decimal?>("Open");

                    b.Property<int>("PlatformID");

                    b.Property<decimal?>("RateSet");

                    b.Property<int>("SourceCurrencyID");

                    b.Property<int>("TargetCurrencyID");

                    b.Property<decimal?>("Volume");

                    b.HasKey("ID");

                    b.HasIndex("SourceCurrencyID");

                    b.HasIndex("TargetCurrencyID");

                    b.HasIndex("PlatformID", "SourceCurrencyID", "TargetCurrencyID", "Date")
                        .IsUnique();

                    b.ToTable("PlatformRates");
                });

            modelBuilder.Entity("dal.models.Transaction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Caption");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("SourceAccountID");

                    b.Property<decimal>("SourceFees");

                    b.Property<decimal>("SourceGrossAmount");

                    b.Property<int?>("TargetAccountID");

                    b.Property<decimal>("TargetFees");

                    b.Property<decimal>("TargetNetAmount");

                    b.Property<byte>("Type");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("SourceAccountID");

                    b.HasIndex("TargetAccountID");

                    b.HasIndex("UserID", "Date");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("dal.models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Login")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("dal.models.Account", b =>
                {
                    b.HasOne("dal.models.Currency", "Currency")
                        .WithMany("Accounts")
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("dal.models.Platform", "Platform")
                        .WithMany("Accounts")
                        .HasForeignKey("PlatformID");
                });

            modelBuilder.Entity("dal.models.PlatformCurrencyPair", b =>
                {
                    b.HasOne("dal.models.Platform", "Platform")
                        .WithMany("PlatformCurrencyPairs")
                        .HasForeignKey("PlatformID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dal.models.Currency", "SourceCurrency")
                        .WithMany("SourcePlatformCurrencyPairs")
                        .HasForeignKey("SourceCurrencyID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("dal.models.Currency", "TargetCurrency")
                        .WithMany("TargetPlatformCurrencyPairs")
                        .HasForeignKey("TargetCurrencyID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("dal.models.PlatformRate", b =>
                {
                    b.HasOne("dal.models.Platform", "Platform")
                        .WithMany("PlatformRates")
                        .HasForeignKey("PlatformID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dal.models.Currency", "SourceCurrency")
                        .WithMany("SourcePlatformRates")
                        .HasForeignKey("SourceCurrencyID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("dal.models.Currency", "TargetCurrency")
                        .WithMany("TargetPlatformRates")
                        .HasForeignKey("TargetCurrencyID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("dal.models.Transaction", b =>
                {
                    b.HasOne("dal.models.Account", "SourceAccount")
                        .WithMany("SourceTransactions")
                        .HasForeignKey("SourceAccountID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("dal.models.Account", "TargetAccount")
                        .WithMany("TargetTransactions")
                        .HasForeignKey("TargetAccountID")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
